services:
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - ${MONGO_DB_PORT}:${MONGO_DB_PORT}
    volumes:
      - ~/mongodb:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_DB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DB_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_DATABASE}
    networks:
      - defect_network

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - ${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}
    environment:
      ME_CONFIG_BASICAUTH_ENABLED: true
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_URL: ${MONGO_EXPRESS_MONGODB_URL}
    depends_on:
      - mongodb
    networks:
      - defect_network

  redis:
    image: redis:latest
    container_name: redis_backend
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    restart: always
    networks:
      - defect_network

  postgres:
    image: postgres:15
    restart: always
    container_name: postgres
    volumes:
      - ~/postgres-data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:5432   # 주의: 호스트에서 PostgreSQL에 접근하기 위해 5432로 고정
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - defect_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend_service
    restart: always
    ports:
      - 8000:8000
    depends_on:
      - postgres
    networks:
      - defect_network
    command: >
      bash -c "
      until pg_isready -h postgres -p 5432; do
        echo 'Waiting for PostgreSQL to be ready...';
        sleep 2;
      done;
      ./venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000"
  

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - defect_network
    command: >
      bash -c "
      until pg_isready -h postgres -p 5432; do
        echo 'Waiting for PostgreSQL to be ready...';
        sleep 2;
      done;
      entrypoint.sh"


networks:
  defect_network:
    driver: bridge
